import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.lang.reflect.*;

// Add this to deal the BufferedReader error.
import static java.lang.System.in;

//The algorithm can be improved further by observing that all primes are of the form 6k ± 1, 
// except 2 and 3. 
// This is because all integers can be expressed as (6k + i) for some integer k and 
// for i = -1, 0, 1, 2, 3, or 4. 
// A more efficient method is to test if n is divisible by 2 or 3. 
// Then to check through all the numbers of form 6k ± 1 ≤ √n. 
// This approach is 3 times faster than testing all numbers up to √n. 
class Prime {
    // The checkPrime method
    void checkPrime(int... nums) {
        for(int n : nums) {
            // Assume the number is prime
            boolean isPrime = true;
            
            // Corner case
            if (n <= 1) {
                isPrime = false;
            }
            // For n=2 or n=3 it will check 
            else if (n == 2 || n == 3) {
                isPrime = true;
            } // For multiple of 2 or 3 This will check 
            else if (n % 2 == 0 || n % 3 == 0) {
                isPrime = false;
            }
            // It will check all the others condition
            else {
                for (int i = 5; i <= Math.sqrt(n); i+=6) {
                    if (n % i == 0 || n % (i + 2) == 0) {
                        isPrime = false;
                        break;
                    }
                }
            }
            // Print the varargs
            if (isPrime) {
                System.out.print(n + " ");
            }
        }
        System.out.println();
    }
}

public class Solution {

	public static void main(String[] args) {
		try{
		BufferedReader br=new BufferedReader(new InputStreamReader(in));
		int n1=Integer.parseInt(br.readLine());
		int n2=Integer.parseInt(br.readLine());
		int n3=Integer.parseInt(br.readLine());
		int n4=Integer.parseInt(br.readLine());
		int n5=Integer.parseInt(br.readLine());
		Prime ob=new Prime();
		ob.checkPrime(n1);
		ob.checkPrime(n1,n2);
		ob.checkPrime(n1,n2,n3);
		ob.checkPrime(n1,n2,n3,n4,n5);	
		Method[] methods=Prime.class.getDeclaredMethods();
		Set<String> set=new HashSet<>();
		boolean overload=false;
		for(int i=0;i<methods.length;i++)
		{
			if(set.contains(methods[i].getName()))
			{
				overload=true;
				break;
			}
			set.add(methods[i].getName());
			
		}
		if(overload)
		{
			throw new Exception("Overloading not allowed");
		}
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
	
}

